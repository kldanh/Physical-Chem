import sympy as sp

# Define symbols
x, L = sp.symbols('x L', real=True, positive=True)
n = sp.symbols('n', integer=True, positive=True)

# Wavefunction for a particle in a 1D box
psi = sp.sqrt(2 / L) * sp.sin(n * sp.pi * x / L)

# Probability density
P = psi**2 # unless imaginary numbers present

# Set the box length to 1 nm
L_value = 1  # in nm

# Function to find the most probable locations
def most_probable_locations(n_value): #with quantum number n as the parameter
    # Substitute n and L into P(x)
    P_n = P.subs({n: n_value, L: L_value})
    # Solve for critical points where P'(x) = 0
    crit_points = sp.solveset(sp.diff(P_n, x), x, domain=sp.Interval(0, L_value))
    # Filter valid critical points in the interval [0, L]
    crit_points = [pt for pt in crit_points if 0 <= pt.evalf() <= L_value]

    # Evaluate second derivative to confirm maxima
    max_points = [
        pt for pt in crit_points
        if sp.diff(P_n, x, 2).subs(x, pt).evalf() < 0  # Negative second derivative implies a maxima
    ]
    return [pt.evalf() for pt in max_points]

# Function to calculate the average location
def average_location(n_value):
    # Substitute n and L into P(x)
    P_n = P.subs({n: n_value, L: L_value})
    # Compute the expectation value of x: ∫ x * P(x) dx from 0 to L
    avg_x = sp.integrate(x * P_n, (x, 0, L_value))
    return avg_x.evalf()

# Results for n=1, 2, 3
for n_value in [1, 2, 3]:
    most_prob_locs = most_probable_locations(n_value)
    avg_loc = average_location(n_value)
    print(f"n = {n_value}:")
    print(f"  Most probable location(s): {most_prob_locs} nm")
    print(f"  Average location: {avg_loc} nm")
    print()


#################


#Question 2: For a 1s orbital in a hydrogen atom, calculate the average radius and the most probable
  #radius. Don’t forget the correct volume element for your integrals. Then calculate the
  #radius where the probability is half of what it is at its maxium value.

import sympy as sp

# Define symbols
r, a0 = sp.symbols('r a0', real=True, positive=True)
#n = sp.symbols('n', integer=True, positive=True)
n = 1
Z = 1 # Atomic number for H
k = 1 # power of the expectant value 
#a0 = 0.529 # Bohr radius in angstroms


# Radial wavefunction for 1s orbital (in terms of the Bohr radius, a0)
R_1s = 2 * (Z / a0)**(3/2) * sp.exp(-r / a0)

# Radial probability density (P(r) = 4 * pi * r^2 * |R_1s(r)|^2)
P_r = R_1s**2 * (4 * sp.pi * r**2)

#Spherical Harmonics for 1s
Y = sp.sqrt(1 / (4*sp.pi))

#P_r = (r * 1 / sp.sqrt(sp.pi * a0**3) * sp.exp(-r / a0))**2 

# Expectation value of r 
A = R_1s**2*r**(k+2)

# Calculate the average radius
def calculate_average_radius():
    avg_radius = sp.integrate(A, (r, 0, sp.oo))
    avg_radius = avg_radius.simplify()
    return avg_radius

# Find the most probable radius (where P'(r) = 0 and P(r) is maximized)
def find_most_probable_radius():
    P_r_prime = sp.diff(P_r, r)
    critical_points = sp.solveset(P_r_prime, r, domain=sp.Interval(0, sp.oo))
    # Filter real, positive solutions
    critical_points = [pt.evalf() for pt in critical_points if pt.is_real and pt > 0]
    if critical_points:
        most_prob_r = max(critical_points, key=lambda x: P_r.subs(r, x).evalf())
        return most_prob_r
    else:
        return None  # No valid solution found

# Find the radius where P(r) is half of its maximum value
def find_half_max_radius():
    r_most_prob = find_most_probable_radius()
    if r_most_prob is None:
        return []  # Return empty if no most probable radius is found
    max_prob = P_r.subs(r, r_most_prob).evalf()

    # Set up the equation P(r) = max_prob / 2
    half_prob_eq = sp.Eq(P_r, max_prob / 2)

    # Solve for r numerically, using sp.solveset for real solutions in the positive range
    half_prob_radii = sp.solve(half_prob_eq, r, domain=sp.Interval(0, 10 * a0))  # Assuming a reasonable upper bound
    half_prob_radii = [pt.evalf() for pt in half_prob_radii if pt.is_real and pt > 0]

    return half_prob_radii


# Numerical values
a0_value = 0.529  # Bohr radius in angstroms

# Compute results
avg_radius = calculate_average_radius().subs(a0, a0_value).evalf() * 100  # Convert to pm
most_probable_radius = find_most_probable_radius()
if most_probable_radius is not None:
    most_probable_radius = most_probable_radius.subs(a0, a0_value).evalf() * 100  # Convert to pm
half_max_radii = [r * 100 * a0_value / a0 for r in find_half_max_radius()]  # Convert to pm

# Print results
print(f"Average Radius: {avg_radius:.2f} pm")
print(f"Most Probable Radius: {most_probable_radius:.2f} pm")
print(f"Radii where P(r) = Half of Maximum Value: {half_max_radii} pm")
